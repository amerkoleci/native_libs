name: Build

on:
  push:
    branches:
      - 'main'
    paths-ignore:
      - 'docs/**'
      - '*.md'
  pull_request:
    paths-ignore:
      - 'docs/**'
      - '*.md'

concurrency:
  group: ci-${{github.actor}}-${{github.head_ref || github.run_number}}-${{github.ref}}-windows
  cancel-in-progress: true

jobs:
  windows:
    runs-on: windows-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v5

    - name: Get CMake
      uses: lukka/get-cmake@v4.0.2

    - name: Configure Win64
      run: cmake . -G "Visual Studio 17 2022" -A x64 -Bbuild_win_64 -DCMAKE_BUILD_TYPE:String=Release -DCMAKE_INSTALL_PREFIX="win-x64-sdk"
    - name: Build Win64
      run: cmake --build build_win_64 --target install --config Release

    - name: Configure Win64 ARM64
      run: cmake . -G "Visual Studio 17 2022" -A ARM64 -Bbuild_win_arm64 -DCMAKE_BUILD_TYPE:String=Release -DCMAKE_INSTALL_PREFIX="win-arm64-sdk"
    - name: Build Win64
      run: cmake --build build_win_arm64 --target install --config Release

    - name: Package Windows
      run: |
        mkdir bin/win-x64
        mkdir bin/win-arm64
        mv win-x64-sdk\bin\*.dll bin/win-x64
        mv win-arm64-sdk\bin\*.dll bin/win-arm64
    - uses: actions/upload-artifact@v4
      with:
        name: libs_windows
        path: bin

  linux:
    runs-on: ubuntu-24.04
    steps:
    - uses: actions/checkout@v5

    - name: Install dependencies
      run: |
          sudo apt update
          sudo apt install libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev libxext-dev libwayland-dev libxkbcommon-dev gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          sudo apt install xorg-dev

    - name: Get CMake
      uses: lukka/get-cmake@v4.0.2

    # Linux
    - name: CMake Configure linux-x64
      run: cmake -S . -B build_linux_64 -G Ninja -DCMAKE_BUILD_TYPE:String=Release -DCMAKE_INSTALL_PREFIX="linux-x64-sdk"
    - name: CMake Build linux-x64
      run: cmake --build build_linux_64 --config Release --target install --verbose --parallel

    - name: CMake Configure linux-arm64
      run: cmake -S . -B build_linux_arm64 -G Ninja -DCMAKE_BUILD_TYPE:String=Release -DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++ -DCMAKE_SYSTEM_PROCESSOR=aarch64 -DCMAKE_SYSTEM_NAME=Linux -DCMAKE_INSTALL_PREFIX="linux-arm64-sdk"
    - name: CMake Build linux-arm64
      run: cmake --build build_linux_arm64 --config Release --target install --verbose --parallel

    # Android
    - name: Setup Android NDK
      id: setup-ndk
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: r28
        add-to-path: false
      env:
        ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}

    - name: CMake Configure (android-arm64-v8a)
      run: >
        cmake -S "." -B "build_android_arm64_v8a"
        -DANDROID_ABI=arm64-v8a
        -DCMAKE_BUILD_TYPE=Release
        -DCMAKE_INSTALL_PREFIX="android-arm64_v8a-sdk"
        -DANDROID_NDK=${{ steps.setup-ndk.outputs.ndk-path }}
        -DCMAKE_TOOLCHAIN_FILE="${{ steps.setup-ndk.outputs.ndk-path }}/build/cmake/android.toolchain.cmake"
    - name: CMake Build (android-arm64-v8a)
      run: cmake --build build_android_arm64_v8a --config Release --target install --verbose --parallel

    - name: CMake Configure (android-armeabi-v7a)
      run: >
        cmake -S "." -B "build_android_armeabi_v7a"
        -DANDROID_ABI=armeabi-v7a
        -DCMAKE_BUILD_TYPE=Release
        -DCMAKE_INSTALL_PREFIX="android-armeabi_v7a-sdk"
        -DANDROID_NDK=${{ steps.setup-ndk.outputs.ndk-path }}
        -DCMAKE_TOOLCHAIN_FILE="${{ steps.setup-ndk.outputs.ndk-path }}/build/cmake/android.toolchain.cmake"
    - name: CMake Build (android-armeabi-v7a)
      run: cmake --build build_android_armeabi_v7a --config Release --target install --verbose --parallel

    - name: CMake Configure (android-x86_64)
      run: >
        cmake -S "." -B "build_android_x86_64"
        -DANDROID_ABI=x86_64
        -DCMAKE_BUILD_TYPE=Release
        -DCMAKE_INSTALL_PREFIX="android-x86_64-sdk"
        -DANDROID_NDK=${{ steps.setup-ndk.outputs.ndk-path }}
        -DCMAKE_TOOLCHAIN_FILE="${{ steps.setup-ndk.outputs.ndk-path }}/build/cmake/android.toolchain.cmake"
    - name: CMake Build (android-armeabi-v7a)
      run: cmake --build build_android_x86_64 --config Release --target install --verbose --parallel

    # Linux and Android artifacts
    - name: Package Linux and Android
      run: |
        mkdir -p bin/linux-x64
        mkdir -p bin/android-arm64
        mkdir -p bin/android-arm
        mkdir -p bin/android-x64
        mv linux-x64-sdk/lib/*.so bin/linux-x64
        mv linux-arm64-sdk/lib/*.so bin/linux-arm64
        mv android-arm64_v8a-sdk/lib/*.so bin/android-arm64
        mv android-armeabi_v7a-sdk/lib/*.so bin/android-arm
        mv android-x86_64-sdk/lib/*.so bin/android-x64
    - uses: actions/upload-artifact@v4
      with:
        name: libs_linux
        path: bin

  macos:
    runs-on: macos-14
    steps:
    - uses: actions/checkout@v5

    - name: Get CMake
      uses: lukka/get-cmake@v4.0.2

    - name: CMake Configure osx-universal
      run: cmake -S . -B build_osx -G Ninja -DCMAKE_BUILD_TYPE:String=Release -DCMAKE_INSTALL_PREFIX="osx-universal-sdk" -D"CMAKE_OSX_ARCHITECTURES=x86_64;arm64"
    - name: CMake Build osx-universal
      run: cmake --build build_osx --config Release --target install

    - name: Package macos
      run: |
        mkdir -p bin/osx
        mv osx-universal-sdk/lib/*.dylib bin/osx
    - uses: actions/upload-artifact@v4
      with:
        name: libs_osx
        path: bin

  combine:
    name: Combine Artifacts
    runs-on: ubuntu-latest
    needs: [windows, linux, macos]
    steps:
      - name: download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Display structure of downloaded files
        run: ls -R
        working-directory: artifacts
      - name: combine
        run: |
          mkdir native_libs
          cp -r artifacts/libs_windows/* native_libs
          cp -r artifacts/libs_linux/* native_libs
          cp -r artifacts/libs_osx/* native_libs
      - uses: edgarrc/action-7z@v1
        with:
          args: 7z a -t7z native_libs.7z ./native_libs/
      - uses: AButler/upload-release-assets@v2.0
        if: github.event_name == 'release' && github.event.action == 'created'
        with:
          files: native_libs.zip
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/upload-artifact@v4
        with:
          name: 'Build Artifacts'
          path: native_libs.7z
      - uses: geekyeggo/delete-artifact@v5
        with:
          name: |
            libs_windows
            libs_linux
            libs_osx
